#!/bin/bash

set -e  # D·ª´ng ngay n·∫øu c√≥ l·ªói

# X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n Ctrl + C
trap "echo 'Qu√° tr√¨nh build b·ªã h·ªßy. D·ª´ng t·∫•t c·∫£.'; exit 1" SIGINT

# L·∫•y phi√™n b·∫£n t·ª´ package.json
version=$(node -p "require('./package.json').version")

# ƒê·ªãnh d·∫°ng th·ªùi gian hi·ªán t·∫°i
current_time=$(date +%Y%m%d_%H%M)

# L·∫•y message commit c·ªßa version tr∆∞·ªõc
previous_version_commit=$(git log --grep "Build and release APK version" --pretty=format:"%H" | sed -n 2p)
previous_version=$(echo "$previous_version_commit" | grep -oE "version [0-9]+\.[0-9]+\.[0-9]+")
previous_version=$(echo "$previous_version" | awk '{print $2}')

# T·∫°o changelog
changelog=""
if [[ -n "$previous_version_commit" ]]; then
  changelog=$(git log --pretty=format:"- %s" "${previous_version_commit}..HEAD" --no-merges)  
fi

# T·∫°o file APK
cd android
./gradlew assembleRelease || { echo "L·ªói: Build APK th·∫•t b·∫°i!"; exit 1; }
cd ..

# ƒê·ªïi t√™n file APK
apk_path="android/app/build/outputs/apk/release/app-release.apk"
new_apk_path="android/app/build/outputs/apk/release/locket_upload_${current_time}.apk"

if [[ ! -f "$apk_path" ]]; then
  echo "L·ªói: Kh√¥ng t√¨m th·∫•y file APK!"
  exit 1
fi

mv "$apk_path" "$new_apk_path"

# C√†i ƒë·∫∑t file APK l√™n thi·∫øt b·ªã (t√πy ch·ªçn)
adb install "$new_apk_path" || { echo "C·∫£nh b√°o: C√†i ƒë·∫∑t APK th·∫•t b·∫°i, nh∆∞ng v·∫´n ti·∫øp t·ª•c..."; }

# Commit v√† push thay ƒë·ªïi l√™n GitHub
git add .
git commit -m "Build and release APK version ${version} on ${current_time}" || { echo "L·ªói: Commit Git th·∫•t b·∫°i!"; exit 1; }
git push origin main || { echo "L·ªói: Push Git th·∫•t b·∫°i!"; exit 1; }

# T·∫°o ho·∫∑c c·∫≠p nh·∫≠t release tr√™n GitHub v·ªõi changelog
release_notes="Release version ${version}
Changelog:
${changelog}"

release_id=$(gh release view "v${version}" --json id -q .id 2>/dev/null || true)

if [ -z "$release_id" ]; then
  # T·∫°o release m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
  gh release create "v${version}" "$new_apk_path" --notes "$release_notes" || { echo "L·ªói: T·∫°o release GitHub th·∫•t b·∫°i!"; exit 1; }
else
  # C·∫≠p nh·∫≠t release n·∫øu ƒë√£ t·ªìn t·∫°i
  gh release update "v${version}" --notes "$release_notes" || { echo "L·ªói: C·∫≠p nh·∫≠t release th·∫•t b·∫°i!"; exit 1; }
  gh release upload "v${version}" "$new_apk_path" --clobber || { echo "L·ªói: Upload file APK th·∫•t b·∫°i!"; exit 1; }
fi

# H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën g·ª≠i th√¥ng b√°o FCM kh√¥ng
read -p "B·∫°n c√≥ mu·ªën g·ª≠i th√¥ng b√°o qua FCM kh√¥ng? (y/n): " send_fcm

if [[ "$send_fcm" == "y" || "$send_fcm" == "Y" ]]; then
  PROJECT_ID=$(node -p "require('./google-services.json').project_info.project_id") || { echo "L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c PROJECT_ID!"; exit 1; }
  FCM_URL="https://fcm.googleapis.com/v1/projects/$PROJECT_ID/messages:send"
  ACCESS_TOKEN=$(gcloud auth application-default print-access-token) || { echo "L·ªói: L·∫•y access token th·∫•t b·∫°i!"; exit 1; }
  PACKAGE_NAME="com.com.locket_upload"

  curl -X POST "$FCM_URL" \
       -H "Authorization: Bearer $ACCESS_TOKEN" \
       -H "Content-Type: application/json" \
       -d '{
   "message": {
    "android": {
     "restricted_package_name": "com.locket_upload"
    },
    "data": {
     "local_update": "true"
    },
    "notification": {
     "body": "'"$DESCRIPTION"'",
     "title": "ƒê√£ c√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi!"
    },
    "topic": "new_update"
   }
  }' || { echo "L·ªói: G·ª≠i th√¥ng b√°o FCM th·∫•t b·∫°i!"; exit 1; }

  echo "üì¢ ƒê√£ g·ª≠i th√¥ng b√°o FCM th√†nh c√¥ng!"
else
  echo "üö´ B·ªè qua vi·ªác g·ª≠i th√¥ng b√°o FCM."
fi

echo "üéâ Build ho√†n t·∫•t th√†nh c√¥ng!"
